Index: src/main/java/com/softserve/bookstore/models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/softserve/bookstore/models/User.java b/src/main/java/com/softserve/bookstore/models/User.java
--- a/src/main/java/com/softserve/bookstore/models/User.java	(revision 4894a31807115233c2e3d08e66d5cef5f7122ab6)
+++ b/src/main/java/com/softserve/bookstore/models/User.java	(revision a5d2c8fbd7166f0faed231ef8313535a405bc498)
@@ -15,6 +15,12 @@
 @Getter
 public class User {
 
+    public static final String FIELD_USER_ID = "id_user";
+    public static final String FIELD_EMAIL = "email";
+    public static final String FIELD_PASSWORD = "password";
+    public static final String FIELD_ORDERS = "orders";
+    public static final String FIELD_ROLES = "roles";
+
     @Id
     private int userId;
 
Index: src/main/java/com/softserve/bookstore/repositories/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/softserve/bookstore/repositories/UserRepository.java b/src/main/java/com/softserve/bookstore/repositories/UserRepository.java
--- a/src/main/java/com/softserve/bookstore/repositories/UserRepository.java	(revision 4894a31807115233c2e3d08e66d5cef5f7122ab6)
+++ b/src/main/java/com/softserve/bookstore/repositories/UserRepository.java	(revision a5d2c8fbd7166f0faed231ef8313535a405bc498)
@@ -2,8 +2,8 @@
 
 import com.softserve.bookstore.connection.ConnectionManager;
 import com.softserve.bookstore.data.ManageUserData;
-import com.softserve.bookstore.data.utils.UserUtility;
 import com.softserve.bookstore.exceptions.UserNotFoundException;
+import com.softserve.bookstore.models.Order;
 import com.softserve.bookstore.models.Role;
 import com.softserve.bookstore.models.User;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,102 +15,132 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 
-//read about life of beans in spring boot
-//automatic connection creation in spring
-//read about repositories in spring
-//services, repositories, components, how does it works inside spring..
-//database initialisation for spring
-//!!!!!
-//CTRL ALT L -format
 @Repository
-public class UserRepository implements RepositoryInterface<User> {
+public class UserRepository {
 
     public static final String INSERT_USERS = "INSERT INTO users(email, password) VALUES (?,?)";
     public static final String SELECT_USERS = "SELECT * FROM users";
     public static final String SELECT_LAST_USERS = "SELECT TOP (?) * FROM users ORDER BY id_user DESC ";
+    public static final String INSERT_USERS_ROLES = "INSERT INTO users_roles(id_user, id_role) VALUES(?,?)";
     public static final String INSERT_ORDERS = "INSERT INTO orders(id_user, date, status) VALUES(?,?,?)";
 
     @Autowired
-    ManageUserData manageUserData;
-
-    @Autowired
-    ConnectionManager connectionManager;
+    private ManageUserData manageUserData;
 
     @Autowired
-    OrderRepository orderRepository;
-
-    @Autowired
-    RoleRepository roleRepository;
-
-
-    public List<User> findAllFromFile(String fileName) throws IOException {
-        return manageUserData.readDataFromFile(fileName);
-    }
+    private ConnectionManager connectionManager;
 
     public List<User> findAll() throws SQLException {
         Connection connection = connectionManager.getConnection();
         PreparedStatement userStatement = connection.prepareStatement(SELECT_USERS);
         ResultSet resultSet = userStatement.executeQuery();
         Logger.info("Users were successfully retrived from the database.");
-        return UserUtility.getUsersFromResultSet(resultSet);
+        return getUsersFromResultSet(resultSet);
+
+    }
+
+    public List<User> findLastUsersAdded(int numberOfRecords) throws SQLException {
+        Connection connection = connectionManager.getConnection();
+        PreparedStatement userStatement = connection.prepareStatement(SELECT_LAST_USERS);
+        userStatement.setInt(1, numberOfRecords);
+        ResultSet resultSet = userStatement.executeQuery();
+        List<User> users = getUsersFromResultSet(resultSet);
+        Collections.reverse(users);
+        return users;
     }
 
+
+    private  List<User> getUsersFromResultSet(ResultSet resultSet) throws SQLException {
+        List<User> users = new ArrayList<>();
+        while(resultSet.next()){
+            int userId = resultSet.getInt(User.FIELD_USER_ID);
+            String email = resultSet.getString(User.FIELD_EMAIL).trim();
+            String password = resultSet.getString(User.FIELD_PASSWORD).trim();
+            User user = new User(userId, email, password);
+            users.add(user);
+        }
+        return users;
+    }
 
-    public Optional<User> getUserByEmail(List<User> users, String email) {
+    public Optional<User> getUserByEmail(List<User> users, String email){
         return users.stream()
                 .filter(user -> email.equals(user.getEmail().trim()))
                 .findFirst();
     }
 
-    public void add(List<User> users) throws SQLException {
+    public void addUsers(List<User> users) throws SQLException{
         Connection connection = connectionManager.getConnection();
         PreparedStatement userStatement = connection.prepareStatement(INSERT_USERS);
         users.forEach(user -> {
-            UserUtility.addUserToBatch(userStatement, user);
+            addUserToBatch(userStatement, user);
         });
         userStatement.executeBatch();
 
         List<User> lastUsersAdded = findLastUsersAdded(users.size());
         lastUsersAdded.forEach(user -> {
             try {
-                roleRepository.addRole(Role.USER.toString(), user);
-                getUserByEmail(users, user.getEmail())
-                        .orElseThrow(() -> new UserNotFoundException("User does not exist."));
+                    addRole(Role.USER.toString(), user);
+                    getUserByEmail(users, user.getEmail())
+                            .orElseThrow(() -> new UserNotFoundException("User with email"));
 
-                User currentUser = getUserByEmail(users, user.getEmail()).get();
+                    User currentUser = getUserByEmail(users, user.getEmail()).get();
 
-                if (currentUser.getRoles().size() > 1) {
-                    roleRepository.addRole(Role.ADMIN.toString(), user);
-                }
-                if (currentUser.getOrders().size() > 1) {
-                    addOrdersToUser(currentUser, users.size());
-                }
-            } catch (UserNotFoundException | SQLException e) {
-                throw new RuntimeException(e);
-            }
-        });
+                    if (currentUser.getRoles().size() > 1) {
+                        addRole(Role.ADMIN.toString(), user);
+                    }
+                    if (currentUser.getOrders().size() > 1) {
+                        addOrdersToUser(currentUser, users.size());
+                    }
+                } catch (UserNotFoundException | SQLException e) {
+                    throw new RuntimeException(e);
+                }
+            });
     }
 
+    private  void addUserToBatch(PreparedStatement userStatement, User user) {
+        try {
+            userStatement.setString(1, user.getEmail());
+            userStatement.setString(2, user.getPassword());
+            userStatement.addBatch();
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
 
-    public List<User> findLastUsersAdded(int numberOfRecords) throws SQLException {
+    private void addRole(String roleName, User user) throws SQLException {
         Connection connection = connectionManager.getConnection();
-        PreparedStatement userStatement = connection.prepareStatement(SELECT_LAST_USERS);
-        userStatement.setInt(1, numberOfRecords);
-        ResultSet resultSet = userStatement.executeQuery();
-        List<User> users = UserUtility.getUsersFromResultSet(resultSet);
-        Collections.reverse(users);
-        return users;
+
+        Map<String, Integer> roleIds = new HashMap<>();
+        roleIds.put(Role.USER.toString(), 1);
+        roleIds.put(Role.ADMIN.toString(), 2);
+
+        int roleId = Optional.ofNullable(roleIds.get(roleName))
+                .orElseThrow(() -> new IllegalArgumentException("Invalid role name."));
+
+        List<Role> roles = new ArrayList<>();
+        roles.add(Role.valueOf(roleName));
+        user.setRoles(roles);
+
+        PreparedStatement roleStatement = connection.prepareStatement(INSERT_USERS_ROLES);
+        roleStatement.setInt(1, user.getUserId());
+        roleStatement.setInt(2, roleId);
+        roleStatement.executeUpdate();
+        Logger.info("User " + user.getEmail() + " has now role " + user.getRoles());
+    }
+
+    private void addOrder(Order order, User user, PreparedStatement orderStatement) throws SQLException {
+        orderStatement.setInt(1, user.getUserId());
+        orderStatement.setDate(2, order.getDate());
+        orderStatement.setString(3, order.getStatus().toString());
     }
 
     private void addOrdersToUser(User user, int numberOfRecords) throws SQLException, UserNotFoundException {
         Connection connection = connectionManager.getConnection();
         PreparedStatement orderStatement = connection.prepareStatement(INSERT_ORDERS);
 
-        List<User> users =  findLastUsersAdded(numberOfRecords);
+        List<User> users = findLastUsersAdded(numberOfRecords);
         User correspondingUser = users.stream()
                 .filter(u -> u.getEmail().equals(user.getEmail()))
                 .findFirst()
@@ -118,7 +148,7 @@
 
         user.getOrders().forEach(order -> {
             try {
-                orderRepository.addOrder(order, correspondingUser, orderStatement);
+                addOrder(order, correspondingUser, orderStatement);
                 orderStatement.addBatch();
             } catch (SQLException e) {
                 throw new RuntimeException();
Index: src/main/java/com/softserve/bookstore/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/softserve/bookstore/service/UserService.java b/src/main/java/com/softserve/bookstore/service/UserService.java
--- a/src/main/java/com/softserve/bookstore/service/UserService.java	(revision 4894a31807115233c2e3d08e66d5cef5f7122ab6)
+++ b/src/main/java/com/softserve/bookstore/service/UserService.java	(revision a5d2c8fbd7166f0faed231ef8313535a405bc498)
@@ -1,5 +1,7 @@
 package com.softserve.bookstore.service;
 
+import com.mysql.cj.log.Log;
+import com.softserve.bookstore.data.ManageUserData;
 import com.softserve.bookstore.exceptions.UserNotFoundException;
 import com.softserve.bookstore.models.User;
 import com.softserve.bookstore.repositories.UserRepository;
@@ -15,17 +17,19 @@
 public class UserService {
 
     @Autowired
-    UserRepository userRepository;
+    private UserRepository userRepository;
+    @Autowired
+    private ManageUserData manageUserData;
 
     public List<User> getAllUsersFromFile(String fileName) throws IOException {
-        List<User> users = userRepository.findAllFromFile(fileName);
+        List<User> users = manageUserData.readDataFromFile(fileName);
         Logger.info("All users were retrived from provided file.");
         return users;
     }
 
     public void addUser(String fileName) throws SQLException, IOException, UserNotFoundException {
         List<User> users = getAllUsersFromFile(fileName);
-        userRepository.add(users);
+        userRepository.addUsers(users);
         Logger.info("Users successfully added to the database.");
     }
 
Index: src/test/java/com/softserve/bookstore/repositories/UserRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/softserve/bookstore/repositories/UserRepositoryTest.java b/src/test/java/com/softserve/bookstore/repositories/UserRepositoryTest.java
new file mode 100644
--- /dev/null	(revision a5d2c8fbd7166f0faed231ef8313535a405bc498)
+++ b/src/test/java/com/softserve/bookstore/repositories/UserRepositoryTest.java	(revision a5d2c8fbd7166f0faed231ef8313535a405bc498)
@@ -0,0 +1,89 @@
+package com.softserve.bookstore.repositories;
+
+import static org.mockito.Mockito.*;
+import static org.junit.jupiter.api.Assertions.*;
+
+import com.softserve.bookstore.connection.ConnectionManager;
+import com.softserve.bookstore.models.User;
+import lombok.SneakyThrows;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+@ExtendWith({MockitoExtension.class})
+public class UserRepositoryTest {
+
+    private static final User expectedUser1 = new User(1, "user1@mail.com", "user1");
+    private static final User expectedUser2 = new User(2, "user2@mail.com", "user2");
+    private final String expectedExceptionMessage = "Expected exception message";
+
+    @InjectMocks
+    private UserRepository userRepository;
+    @Mock
+    private ConnectionManager mockConnectionManager;
+    @Mock
+    private Connection mockConnection;
+    @Mock
+    private PreparedStatement mockPreparedStatement;
+    @Mock
+    private ResultSet mockResultSet;
+
+    @Test
+    @SneakyThrows
+    public void findAll_ReturnsTwoUser_Success() {
+        when(mockConnectionManager.getConnection()).thenReturn(mockConnection);
+        when(mockConnection.prepareStatement(UserRepository.SELECT_USERS)).thenReturn(mockPreparedStatement);
+        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
+        when(mockResultSet.next())
+                .thenReturn(true)
+                .thenReturn(true)
+                .thenReturn(false);
+
+        when(mockResultSet.getInt(User.FIELD_USER_ID))
+                .thenReturn(expectedUser1.getUserId())
+                .thenReturn(expectedUser2.getUserId());
+        when(mockResultSet.getString(User.FIELD_EMAIL))
+                .thenReturn(expectedUser1.getEmail())
+                .thenReturn(expectedUser2.getEmail());
+        when(mockResultSet.getString(User.FIELD_PASSWORD))
+                .thenReturn(expectedUser1.getPassword())
+                .thenReturn(expectedUser2.getPassword());
+
+
+        List<User> userList = userRepository.findAll();
+
+        verify(mockResultSet, times(3)).next();
+
+        assertEquals(userList.size(), 2);
+
+        User foundUser1 = userList.get(0);
+        assertEquals(foundUser1.getUserId(), expectedUser1.getUserId());
+        assertEquals(foundUser1.getEmail(), expectedUser1.getEmail());
+        assertEquals(foundUser1.getPassword(), expectedUser1.getPassword());
+
+        User foundUser2 = userList.get(1);
+        assertEquals(foundUser2.getUserId(), expectedUser2.getUserId());
+        assertEquals(foundUser2.getEmail(), expectedUser2.getEmail());
+        assertEquals(foundUser2.getPassword(), expectedUser2.getPassword());
+    }
+
+    @Test
+    public void findAll_ThrowsSqlException_Failure() throws SQLException {
+        when(mockConnectionManager.getConnection()).thenReturn(mockConnection);
+
+        doThrow(new SQLException(expectedExceptionMessage)).when(mockConnection).prepareStatement(UserRepository.SELECT_USERS);
+        Exception actualException = assertThrows(SQLException.class, () -> {
+            userRepository.findAll();
+        });
+        assertEquals(actualException.getMessage(), expectedExceptionMessage);
+    }
+}
\ No newline at end of file
